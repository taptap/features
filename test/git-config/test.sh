#!/bin/bash

# This test file will be automatically detected and run by devcontainer CLI

set -e

# Optional: Import test library
source dev-container-features-test-lib

# Check if dependencies are available
if ! command -v git >/dev/null 2>&1; then
    echo "SKIP: This feature requires Git >= 2.48.0 to be pre-installed."
    echo "Autogenerated tests cannot handle feature dependencies at build time."
    echo "Use scenario tests (--skip-autogenerated) for proper dependency testing."
    exit 0
fi

echo "Git available: $(git --version)"

# Feature-specific tests

# Test: Check if git is installed and version >= 2.48.0
check "git-installed" git --version
check "git-version-check" bash -c "git_version=\$(git --version | sed -n 's/^git version \\([0-9][0-9.]*\\).*/\\1/p'); major=\$(echo \$git_version | cut -d. -f1); minor=\$(echo \$git_version | cut -d. -f2); [ \$major -gt 2 ] || ([ \$major -eq 2 ] && [ \$minor -ge 48 ])"

# Test: Verify system gitconfig values
check "git-autocrlf" bash -c "git config --system --get core.autocrlf | grep -q 'false'"
check "git-safecrlf" bash -c "git config --system --get core.safecrlf | grep -q 'true'"
check "git-eol" bash -c "git config --system --get core.eol | grep -q 'lf'"

# Test: Verify gitignore file exists
check "gitignore-exists" bash -c "test -f $(git config --system --get core.excludesFile)"

# Test: Check gitignore content
check "gitignore-content" bash -c "grep -q '.DS_Store' $(git config --system --get core.excludesFile)"

# Report test results
reportResults